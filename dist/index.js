// Generated by CoffeeScript 1.10.0
(function() {
  var React, createHelper, isProps, isSelector, mergeProps, parseChildren, parseClassName, parseId, parseSelectorProps, r, rDom, tag,
    slice = [].slice;

  React = require('react');

  rDom = require('r-dom');

  isSelector = function(param) {
    return typeof param === 'string' && (param === '' || param[0] === '.' || param[0] === '#');
  };

  isProps = function(param) {
    return !Array.isArray(param) && typeof param === 'object' && param.$$typeof !== Symbol["for"]('react.element');
  };

  parseSelectorProps = function(param) {
    var className, id, props;
    props = {};
    className = parseClassName(param);
    if (className != null) {
      props.className = className;
    }
    id = parseId(param);
    if (id != null) {
      props.id = id;
    }
    return props;
  };

  parseClassName = function(param) {
    var className, i, len, match, matches;
    className = null;
    matches = param.match(/(\.[^#|^\.]+)/g);
    if (matches != null) {
      for (i = 0, len = matches.length; i < len; i++) {
        match = matches[i];
        if (className != null) {
          className = className + " " + (match.slice(1));
        } else {
          className = match.slice(1);
        }
      }
    }
    return className;
  };

  parseId = function(param) {
    var matches;
    matches = param.match(/(#[^#|^\.]+)/g);
    if (matches != null) {
      return matches[matches.length - 1].slice(1);
    } else {
      return null;
    }
  };

  parseChildren = function(children) {
    var child, flatChildren, i, len;
    if (Array.isArray(children)) {
      flatChildren = [];
      for (i = 0, len = children.length; i < len; i++) {
        child = children[i];
        flatChildren = flatChildren.concat(parseChildren(child));
      }
      return flatChildren;
    } else if (children != null) {
      return [children];
    } else {
      return [];
    }
  };

  mergeProps = function(props, extraProps) {
    var key;
    if ((props.className != null) && (extraProps.className != null)) {
      console.warn("RDomCoffeescript: a className is already defined in selector with value '" + props.className + "'");
    }
    if ((props.id != null) && (extraProps.id != null)) {
      console.warn("RDomCoffeescript: an id is already defined in selector with value '" + props.id + "'");
    }
    for (key in extraProps) {
      props[key] = extraProps[key];
    }
    return props;
  };

  r = function() {
    var children, component, extraParams, i, len, mergedProps, param, props, selector;
    component = arguments[0], selector = arguments[1], props = arguments[2], extraParams = 4 <= arguments.length ? slice.call(arguments, 3) : [];
    children = [];
    mergedProps = {};
    if (isSelector(selector)) {
      mergedProps = parseSelectorProps(selector);
    } else {
      extraParams = parseChildren(props).concat(extraParams);
      props = selector;
    }
    if (isProps(props)) {
      mergedProps = mergeProps(mergedProps, props);
    } else {
      children = children.concat(parseChildren(props));
    }
    for (i = 0, len = extraParams.length; i < len; i++) {
      param = extraParams[i];
      children = children.concat(parseChildren(param));
    }
    return rDom(component, mergedProps, children);
  };

  createHelper = function(tag) {
    return function() {
      var extraParams, props, selector;
      selector = arguments[0], props = arguments[1], extraParams = 3 <= arguments.length ? slice.call(arguments, 2) : [];
      return r(tag, selector, props, extraParams);
    };
  };

  for (tag in React.DOM) {
    if (React.DOM.hasOwnProperty(tag)) {
      r[tag] = createHelper(tag);
    }
  }

  module.exports = r;

}).call(this);
